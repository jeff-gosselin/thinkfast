{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { IS_SERVER } from '../constants';\nimport { useResize } from './resize'; // determine if we are in fullscreen mode and why\n// don't set any state in here as called on init too\n\nexport function isFullScreenElement(el) {\n  if (el && el.current) {\n    return Boolean(document.fullscreenElement === el.current || document.mozFullScreenElement === el.current || document.webkitFullscreenElement === el.current || document.msFullscreenElement === el.current);\n  }\n\n  return Boolean(document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement || document.fullscreen || document.mozFullScreen || document.webkitIsFullScreen || document.fullScreenMode);\n}\nexport function useFullScreen() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var fsEl = options && options.element;\n  var initialState = IS_SERVER ? false : isFullScreenElement(fsEl);\n\n  var _useState = useState(initialState),\n      fullScreen = _useState[0],\n      setFullScreen = _useState[1]; // access various open fullscreen methods\n\n\n  function openFullScreen() {\n    var el = fsEl && fsEl.current || document.documentElement;\n    if (el.requestFullscreen) return el.requestFullscreen();\n    if (el.mozRequestFullScreen) return el.mozRequestFullScreen();\n    if (el.webkitRequestFullscreen) return el.webkitRequestFullscreen();\n    if (el.msRequestFullscreen) return el.msRequestFullscreen();\n  } // access various exit fullscreen methods\n\n\n  function closeFullScreen() {\n    if (document.exitFullscreen) return document.exitFullscreen();\n    if (document.mozCancelFullScreen) return document.mozCancelFullScreen();\n    if (document.webkitExitFullscreen) return document.webkitExitFullscreen();\n    if (document.msExitFullscreen) return document.msExitFullscreen();\n  }\n\n  useEffect(function () {\n    function handleChange() {\n      setFullScreen(isFullScreenElement(fsEl));\n    }\n\n    document.addEventListener('webkitfullscreenchange', handleChange, false);\n    document.addEventListener('mozfullscreenchange', handleChange, false);\n    document.addEventListener('msfullscreenchange', handleChange, false);\n    document.addEventListener('MSFullscreenChange', handleChange, false); // IE11\n\n    document.addEventListener('fullscreenchange', handleChange, false);\n    return function () {\n      document.removeEventListener('webkitfullscreenchange', handleChange);\n      document.removeEventListener('mozfullscreenchange', handleChange);\n      document.removeEventListener('msfullscreenchange', handleChange);\n      document.removeEventListener('MSFullscreenChange', handleChange);\n      document.removeEventListener('fullscreenchange', handleChange);\n    };\n  }, [options.element, fsEl]);\n  return {\n    fullScreen: fullScreen,\n    open: openFullScreen,\n    close: closeFullScreen,\n    toggle: fullScreen ? closeFullScreen : openFullScreen\n  };\n}\nexport function getSizeInfo() {\n  if (IS_SERVER) return {};\n  return {\n    screenTop: window.screenTop,\n    screenY: window.screenY,\n    screenWidth: window.screen.width,\n    screenHeight: window.screen.height,\n    innerWidth: window.innerWidth,\n    innerHeight: window.innerHeight\n  };\n}\nexport function isFullScreenSize(sizeInfo) {\n  if (sizeInfo.screenWidth === sizeInfo.innerWidth && sizeInfo.screenHeight === sizeInfo.innerHeight) {\n    return true;\n  } else if (!sizeInfo.screenTop && !sizeInfo.screenY) {\n    return true;\n  }\n\n  return false;\n}\nexport function useFullScreenBrowser() {\n  var size = useResize();\n  var initialSizeInfo = getSizeInfo();\n\n  var _useState2 = useState(IS_SERVER ? false : isFullScreenSize(initialSizeInfo)),\n      fullScreen = _useState2[0],\n      setFullScreen = _useState2[1];\n\n  var _useState3 = useState(initialSizeInfo),\n      sizeInfo = _useState3[0],\n      setSizeInfo = _useState3[1];\n\n  useEffect(function () {\n    var sizeInfo = getSizeInfo();\n    setFullScreen(isFullScreenSize(sizeInfo));\n    setSizeInfo(sizeInfo);\n  }, [size.width, size.height]);\n  return {\n    fullScreen: fullScreen,\n    info: sizeInfo\n  };\n}","map":{"version":3,"sources":["/Users/meghangosselin/Apps/thinkfast/node_modules/react-browser-hooks/es/hooks/fullscreen.js"],"names":["useState","useEffect","IS_SERVER","useResize","isFullScreenElement","el","current","Boolean","document","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","fullscreen","mozFullScreen","webkitIsFullScreen","fullScreenMode","useFullScreen","options","arguments","length","undefined","fsEl","element","initialState","_useState","fullScreen","setFullScreen","openFullScreen","documentElement","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","closeFullScreen","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","handleChange","addEventListener","removeEventListener","open","close","toggle","getSizeInfo","screenTop","window","screenY","screenWidth","screen","width","screenHeight","height","innerWidth","innerHeight","isFullScreenSize","sizeInfo","useFullScreenBrowser","size","initialSizeInfo","_useState2","_useState3","setSizeInfo","info"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { IS_SERVER } from '../constants';\nimport { useResize } from './resize';\n\n// determine if we are in fullscreen mode and why\n// don't set any state in here as called on init too\nexport function isFullScreenElement(el) {\n  if (el && el.current) {\n    return Boolean(document.fullscreenElement === el.current || document.mozFullScreenElement === el.current || document.webkitFullscreenElement === el.current || document.msFullscreenElement === el.current);\n  }\n\n  return Boolean(document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement || document.fullscreen || document.mozFullScreen || document.webkitIsFullScreen || document.fullScreenMode);\n}\n\nexport function useFullScreen() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var fsEl = options && options.element;\n  var initialState = IS_SERVER ? false : isFullScreenElement(fsEl);\n\n  var _useState = useState(initialState),\n      fullScreen = _useState[0],\n      setFullScreen = _useState[1];\n\n  // access various open fullscreen methods\n\n\n  function openFullScreen() {\n    var el = fsEl && fsEl.current || document.documentElement;\n\n    if (el.requestFullscreen) return el.requestFullscreen();\n    if (el.mozRequestFullScreen) return el.mozRequestFullScreen();\n    if (el.webkitRequestFullscreen) return el.webkitRequestFullscreen();\n    if (el.msRequestFullscreen) return el.msRequestFullscreen();\n  }\n\n  // access various exit fullscreen methods\n  function closeFullScreen() {\n    if (document.exitFullscreen) return document.exitFullscreen();\n    if (document.mozCancelFullScreen) return document.mozCancelFullScreen();\n    if (document.webkitExitFullscreen) return document.webkitExitFullscreen();\n    if (document.msExitFullscreen) return document.msExitFullscreen();\n  }\n\n  useEffect(function () {\n    function handleChange() {\n      setFullScreen(isFullScreenElement(fsEl));\n    }\n\n    document.addEventListener('webkitfullscreenchange', handleChange, false);\n    document.addEventListener('mozfullscreenchange', handleChange, false);\n    document.addEventListener('msfullscreenchange', handleChange, false);\n    document.addEventListener('MSFullscreenChange', handleChange, false); // IE11\n    document.addEventListener('fullscreenchange', handleChange, false);\n\n    return function () {\n      document.removeEventListener('webkitfullscreenchange', handleChange);\n      document.removeEventListener('mozfullscreenchange', handleChange);\n      document.removeEventListener('msfullscreenchange', handleChange);\n      document.removeEventListener('MSFullscreenChange', handleChange);\n      document.removeEventListener('fullscreenchange', handleChange);\n    };\n  }, [options.element, fsEl]);\n\n  return {\n    fullScreen: fullScreen,\n    open: openFullScreen,\n    close: closeFullScreen,\n    toggle: fullScreen ? closeFullScreen : openFullScreen\n  };\n}\n\nexport function getSizeInfo() {\n  if (IS_SERVER) return {};\n  return {\n    screenTop: window.screenTop,\n    screenY: window.screenY,\n    screenWidth: window.screen.width,\n    screenHeight: window.screen.height,\n    innerWidth: window.innerWidth,\n    innerHeight: window.innerHeight\n  };\n}\n\nexport function isFullScreenSize(sizeInfo) {\n  if (sizeInfo.screenWidth === sizeInfo.innerWidth && sizeInfo.screenHeight === sizeInfo.innerHeight) {\n    return true;\n  } else if (!sizeInfo.screenTop && !sizeInfo.screenY) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function useFullScreenBrowser() {\n  var size = useResize();\n  var initialSizeInfo = getSizeInfo();\n\n  var _useState2 = useState(IS_SERVER ? false : isFullScreenSize(initialSizeInfo)),\n      fullScreen = _useState2[0],\n      setFullScreen = _useState2[1];\n\n  var _useState3 = useState(initialSizeInfo),\n      sizeInfo = _useState3[0],\n      setSizeInfo = _useState3[1];\n\n  useEffect(function () {\n    var sizeInfo = getSizeInfo();\n    setFullScreen(isFullScreenSize(sizeInfo));\n    setSizeInfo(sizeInfo);\n  }, [size.width, size.height]);\n\n  return {\n    fullScreen: fullScreen,\n    info: sizeInfo\n  };\n}"]},"metadata":{},"sourceType":"module"}