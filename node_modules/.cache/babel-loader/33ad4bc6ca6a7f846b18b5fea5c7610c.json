{"ast":null,"code":"import _toConsumableArray from \"/Users/meghangosselin/Apps/thinkfast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/meghangosselin/Apps/thinkfast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/meghangosselin/Apps/thinkfast/src/components/GameScreen.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { cards } from \"../cardData\";\nimport { shuffleCards } from \"../shuffleCards\"; // Component imports\n\nimport Round from \"./Round\";\nimport Dashboard from \"./Dashboard\";\nimport Cards from \"./Cards\";\nimport Grid from \"./Grid\";\nimport Points from \"./Points\"; // Styles import\n\nimport \"../styles/GameScreen.scss\"; // Dependancy for sound\n\nimport { Howl, Howler } from \"howler\";\nexport default function GameScreen(_ref) {\n  var playerMode = _ref.playerMode,\n      player1Score = _ref.player1Score,\n      setPlayer1Score = _ref.setPlayer1Score,\n      player2Score = _ref.player2Score,\n      setPlayer2Score = _ref.setPlayer2Score,\n      setIsEnd = _ref.setIsEnd;\n  // Time for each round\n  var roundTime = 60; // Master Volume\n\n  Howler.volume(0.85); // Cards\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      gameCards = _useState2[0],\n      setGameCards = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      cardChoices = _useState4[0],\n      setCardChoices = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      matches = _useState6[0],\n      setMatches = _useState6[1]; // Players\n\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentPlayer = _useState8[0],\n      setCurrentPlayer = _useState8[1]; // Clock\n\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      startClock = _useState10[0],\n      setStartClock = _useState10[1];\n\n  var _useState11 = useState(roundTime),\n      _useState12 = _slicedToArray(_useState11, 2),\n      clockTime = _useState12[0],\n      setClockTime = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      timeAdded = _useState14[0],\n      setTimeAdded = _useState14[1]; // Rounds\n\n\n  var _useState15 = useState(1),\n      _useState16 = _slicedToArray(_useState15, 2),\n      round = _useState16[0],\n      setRound = _useState16[1]; // Current points scored\n\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      shake = _useState18[0],\n      setShake = _useState18[1];\n\n  var _useState19 = useState(0),\n      _useState20 = _slicedToArray(_useState19, 2),\n      points = _useState20[0],\n      setPoints = _useState20[1];\n\n  var _useState21 = useState(0),\n      _useState22 = _slicedToArray(_useState21, 2),\n      bonusPoints = _useState22[0],\n      setBonusPoints = _useState22[1]; ////////////////////////////////////////////////////////////////////\n  // Shuffles deck when players switch turns\n\n\n  useEffect(function () {\n    var shuffledDeck = shuffleCards(cards);\n    return setGameCards(_toConsumableArray(shuffledDeck));\n  }, [currentPlayer]); // Resets and shuffles cards if all matches in deck are made\n\n  useEffect(function () {\n    if (matches.length === 14) {\n      var shuffledDeck = shuffleCards(cards);\n      setMatches([]);\n      setGameCards(_toConsumableArray(shuffledDeck));\n    }\n  }, [cardChoices]); // New Round\n\n  useEffect(function () {\n    if (playerMode === 1) {\n      var shuffledDeck = shuffleCards(cards);\n      return setGameCards(_toConsumableArray(shuffledDeck));\n    }\n  }, [round]); ////////////////////////////////////////////////////////////////////\n  // SPECIAL TILES **************************************************\n\n  var timerTile = function timerTile() {\n    var audio = new Howl({\n      src: [\"audio/time-added.mp3\"],\n      volume: 0.5\n    });\n    setClockTime(clockTime + 30); // Adds 30 seconds to the clock\n\n    setTimeAdded(true); // initiates clock animation\n\n    audio.play();\n  };\n\n  var bonusTile = function bonusTile(card) {\n    if (matches.length === 0) {\n      return card.pts;\n    } // Checks what the last match was worth\n\n\n    if (matches[0] === \"Wildcard\" || matches[0] === \"Doubler\") {\n      if (card.name === \"Wildcard\") {\n        return bonusPoints; // State that stored what last matched bonus tile was worth\n      }\n\n      if (card.name === \"Doubler\") {\n        return bonusPoints * 2; // State that stored what last matched bonus tile was worth\n      }\n    } else {\n      var lastMatch = gameCards.filter(function (gameCard) {\n        return gameCard.name === matches[0];\n      });\n\n      if (card.name === \"Wildcard\") {\n        return lastMatch[0].pts;\n      }\n\n      if (card.name === \"Doubler\") {\n        return lastMatch[0].pts * 2;\n      }\n    }\n  }; // SPECIAL TILES ABOVE **************************************************\n  // Scoring\n\n\n  var addToScore = function addToScore(points) {\n    if (currentPlayer === true) {\n      setPlayer1Score(player1Score + points);\n    } else {\n      setPlayer2Score(player2Score + points);\n    }\n  }; // ** What happens after 2 cards are picked\n  // 1. Checks for a match\n\n\n  var checkMatch = function checkMatch(card1, card2) {\n    setShake(true);\n\n    if (card1 === card2) {\n      return true;\n    } else {\n      return false;\n    }\n  }; // 2. If there is a match\n\n\n  var ifMatch = function ifMatch(card) {\n    // Set sound for match\n    var matchMade = new Howl({\n      src: [\"audio/match.mp3\"],\n      volume: 0.25\n    });\n    var tilePoints; // Doesn't play this normal match sound if the match is the Timer\n\n    card.name !== \"Timer\" && matchMade.play(); // Check for type of match... bonus tiles or regular match\n\n    if (card.name === \"Wildcard\") {\n      addToScore(bonusTile(card));\n      tilePoints = bonusTile(card);\n      setBonusPoints(tilePoints); // Stores the points scored by the bonus tile\n\n      if (matches[0] === \"Timer\") {\n        timerTile();\n      }\n    } else if (card.name === \"Doubler\") {\n      addToScore(bonusTile(card));\n      tilePoints = bonusTile(card);\n      setBonusPoints(tilePoints); // Stores the points scored by the bonus tile\n    } else {\n      addToScore(card.pts);\n      tilePoints = card.pts;\n    }\n\n    setMatches([card.name].concat(_toConsumableArray(matches)));\n    setPoints(tilePoints); // Displays current points a match gives\n\n    setTimeout(function () {\n      return setCardChoices([]);\n    }, 1000); // Flips tiles back to hidden\n  }; // 3. If there is not a match\n\n\n  var notMatch = function notMatch() {\n    var misMatch = new Howl({\n      src: [\"audio/error.mp3\"],\n      volume: 0.35\n    });\n    addToScore(-1); // Triggers display of \"-1\" on screen\n\n    setPoints(-1); // Tiles are flipped over to hide them\n\n    setTimeout(function () {\n      return setCardChoices([]);\n    }, 200);\n    misMatch.play();\n  }; // ** When a card is selected **********************************************************\n\n\n  var handleCardSelection = function handleCardSelection(card) {\n    // Prevents from clicking cards that are already a match\n    if (matches.includes(card.name)) {\n      return;\n    } // Can't choose a card unless clock has been started\n\n\n    if (!startClock) {\n      return;\n    } // Sound for card reveal\n\n\n    var revealCard = new Howl({\n      src: [\"audio/click.mp3\"]\n    }); // Adds a card if no other cards were yet selected\n\n    if (cardChoices.length === 0) {\n      revealCard.play();\n      setCardChoices([card]);\n      setTimeAdded(false);\n    } // When 2nd card selection is made... checks if same card was not selected twice before adding\n\n\n    if (cardChoices.length === 1 && card.id !== cardChoices[0].id) {\n      revealCard.play();\n      setCardChoices([].concat(_toConsumableArray(cardChoices), [card])); // After 2 cards are selected... performs proper response to match or no match\n\n      var match = checkMatch(cardChoices[0].name, card.name);\n\n      if (match) {\n        // If player gets the \"Timer\" match... 30 seconds are added to the clock\n        if (card.name === \"Timer\") {\n          timerTile();\n        }\n\n        ifMatch(card); // Adds points to player's score\n      } else {\n        notMatch(); // Subtracts a point to player's score\n      }\n\n      setTimeout(function () {\n        return setShake(false);\n      }, 1000);\n    }\n  }; // Start clock\n\n\n  var runClock = function runClock() {\n    var clockClick = new Howl({\n      src: [\"audio/clock-click.mp3\"],\n      volume: 0.5\n    }); // let countdown = new Howl({\n    //   src: [\"audio/countdown.mp3\"],\n    //   volume: 0.5,\n    //   loop: true\n    // });\n\n    clockClick.play(); // countdown.play();\n\n    setStartClock(true);\n    var clock = setInterval(function () {\n      return setClockTime(function (clockTime) {\n        if (clockTime > 0) {\n          return clockTime - 1;\n        } else {\n          var buzz = new Howl({\n            src: [\"audio/buzzer.mp3\"],\n            volume: 0.35\n          });\n          buzz.play();\n          setTimeAdded(false);\n          setMatches([]);\n          setCardChoices([]); // Switches to other player if in 2 Player Mode\n\n          if (playerMode !== 1) {\n            setCurrentPlayer(!currentPlayer);\n            setRound(round + 0.5);\n          } else {\n            setRound(round + 1);\n          }\n\n          setStartClock(false);\n          setClockTime(roundTime);\n          clearInterval(clock);\n        }\n      });\n    }, 1000);\n  }; // End of Game\n\n\n  var gameOver = function gameOver() {\n    setIsEnd(true);\n    Howler.unload();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"game-screen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 5\n    }\n  }, Math.floor(round) > 8 ? gameOver() : null, round === Math.ceil(round) && !startClock ? /*#__PURE__*/React.createElement(Round, {\n    roundNumber: round,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 9\n    }\n  }) : null, cardChoices.length > 1 ? /*#__PURE__*/React.createElement(Points, {\n    cardPoints: points,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 33\n    }\n  }) : null, /*#__PURE__*/React.createElement(Dashboard, {\n    currentPlayer: currentPlayer,\n    round: round,\n    player1Score: player1Score,\n    player2Score: player2Score,\n    startClock: startClock,\n    runClock: runClock,\n    clockTime: clockTime,\n    shake: shake,\n    timeAdded: timeAdded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Cards, {\n    gameCards: gameCards,\n    handleCardSelection: handleCardSelection,\n    cardChoices: cardChoices,\n    matches: matches,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/meghangosselin/Apps/thinkfast/src/components/GameScreen.js"],"names":["React","useState","useEffect","cards","shuffleCards","Round","Dashboard","Cards","Grid","Points","Howl","Howler","GameScreen","playerMode","player1Score","setPlayer1Score","player2Score","setPlayer2Score","setIsEnd","roundTime","volume","gameCards","setGameCards","cardChoices","setCardChoices","matches","setMatches","currentPlayer","setCurrentPlayer","startClock","setStartClock","clockTime","setClockTime","timeAdded","setTimeAdded","round","setRound","shake","setShake","points","setPoints","bonusPoints","setBonusPoints","shuffledDeck","length","timerTile","audio","src","play","bonusTile","card","pts","name","lastMatch","filter","gameCard","addToScore","checkMatch","card1","card2","ifMatch","matchMade","tilePoints","setTimeout","notMatch","misMatch","handleCardSelection","includes","revealCard","id","match","runClock","clockClick","clock","setInterval","buzz","clearInterval","gameOver","unload","Math","floor","ceil"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { cards } from \"../cardData\";\r\nimport { shuffleCards } from \"../shuffleCards\";\r\n\r\n// Component imports\r\nimport Round from \"./Round\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport Cards from \"./Cards\";\r\nimport Grid from \"./Grid\";\r\nimport Points from \"./Points\";\r\n\r\n// Styles import\r\nimport \"../styles/GameScreen.scss\";\r\n\r\n// Dependancy for sound\r\nimport { Howl, Howler } from \"howler\";\r\n\r\nexport default function GameScreen({\r\n  playerMode,\r\n  player1Score,\r\n  setPlayer1Score,\r\n  player2Score,\r\n  setPlayer2Score,\r\n  setIsEnd,\r\n}) {\r\n  // Time for each round\r\n  let roundTime = 60;\r\n\r\n  // Master Volume\r\n  Howler.volume(0.85);\r\n\r\n  // Cards\r\n  const [gameCards, setGameCards] = useState([]);\r\n  const [cardChoices, setCardChoices] = useState([]);\r\n  const [matches, setMatches] = useState([]);\r\n\r\n  // Players\r\n  const [currentPlayer, setCurrentPlayer] = useState(true);\r\n\r\n  // Clock\r\n  const [startClock, setStartClock] = useState(false);\r\n  const [clockTime, setClockTime] = useState(roundTime);\r\n  const [timeAdded, setTimeAdded] = useState(false);\r\n\r\n  // Rounds\r\n  const [round, setRound] = useState(1);\r\n\r\n  // Current points scored\r\n  const [shake, setShake] = useState(false);\r\n  const [points, setPoints] = useState(0);\r\n  const [bonusPoints, setBonusPoints] = useState(0);\r\n\r\n  ////////////////////////////////////////////////////////////////////\r\n\r\n  // Shuffles deck when players switch turns\r\n  useEffect(() => {\r\n    let shuffledDeck = shuffleCards(cards);\r\n    return setGameCards([...shuffledDeck]);\r\n  }, [currentPlayer]);\r\n\r\n  // Resets and shuffles cards if all matches in deck are made\r\n  useEffect(() => {\r\n    if (matches.length === 14) {\r\n      let shuffledDeck = shuffleCards(cards);\r\n      setMatches([]);\r\n      setGameCards([...shuffledDeck]);\r\n    }\r\n  }, [cardChoices]);\r\n\r\n  // New Round\r\n  useEffect(() => {\r\n    if (playerMode === 1) {\r\n      let shuffledDeck = shuffleCards(cards);\r\n      return setGameCards([...shuffledDeck]);\r\n    }\r\n  }, [round]);\r\n\r\n  ////////////////////////////////////////////////////////////////////\r\n\r\n  // SPECIAL TILES **************************************************\r\n  const timerTile = () => {\r\n    let audio = new Howl({\r\n      src: [\"audio/time-added.mp3\"],\r\n      volume: 0.5,\r\n    });\r\n\r\n    setClockTime(clockTime + 30); // Adds 30 seconds to the clock\r\n    setTimeAdded(true); // initiates clock animation\r\n    audio.play();\r\n  };\r\n\r\n  const bonusTile = (card) => {\r\n    if (matches.length === 0) {\r\n      return card.pts;\r\n    }\r\n    // Checks what the last match was worth\r\n    if (matches[0] === \"Wildcard\" || matches[0] === \"Doubler\") {\r\n      if (card.name === \"Wildcard\") {\r\n        return bonusPoints; // State that stored what last matched bonus tile was worth\r\n      }\r\n\r\n      if (card.name === \"Doubler\") {\r\n        return bonusPoints * 2; // State that stored what last matched bonus tile was worth\r\n      }\r\n    } else {\r\n      let lastMatch = gameCards.filter((gameCard) => {\r\n        return gameCard.name === matches[0];\r\n      });\r\n\r\n      if (card.name === \"Wildcard\") {\r\n        return lastMatch[0].pts;\r\n      }\r\n\r\n      if (card.name === \"Doubler\") {\r\n        return lastMatch[0].pts * 2;\r\n      }\r\n    }\r\n  };\r\n\r\n  // SPECIAL TILES ABOVE **************************************************\r\n\r\n  // Scoring\r\n  const addToScore = (points) => {\r\n    if (currentPlayer === true) {\r\n      setPlayer1Score(player1Score + points);\r\n    } else {\r\n      setPlayer2Score(player2Score + points);\r\n    }\r\n  };\r\n\r\n  // ** What happens after 2 cards are picked\r\n  // 1. Checks for a match\r\n  const checkMatch = (card1, card2) => {\r\n    setShake(true);\r\n    if (card1 === card2) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // 2. If there is a match\r\n  const ifMatch = (card) => {\r\n    // Set sound for match\r\n    const matchMade = new Howl({\r\n      src: [\"audio/match.mp3\"],\r\n      volume: 0.25,\r\n    });\r\n\r\n    let tilePoints;\r\n\r\n    // Doesn't play this normal match sound if the match is the Timer\r\n    card.name !== \"Timer\" && matchMade.play();\r\n\r\n    // Check for type of match... bonus tiles or regular match\r\n    if (card.name === \"Wildcard\") {\r\n      addToScore(bonusTile(card));\r\n      tilePoints = bonusTile(card);\r\n      setBonusPoints(tilePoints); // Stores the points scored by the bonus tile\r\n      if (matches[0] === \"Timer\") {\r\n        timerTile();\r\n      }\r\n    } else if (card.name === \"Doubler\") {\r\n      addToScore(bonusTile(card));\r\n      tilePoints = bonusTile(card);\r\n      setBonusPoints(tilePoints); // Stores the points scored by the bonus tile\r\n    } else {\r\n      addToScore(card.pts);\r\n      tilePoints = card.pts;\r\n    }\r\n\r\n    setMatches([card.name, ...matches]);\r\n    setPoints(tilePoints); // Displays current points a match gives\r\n    setTimeout(() => setCardChoices([]), 1000); // Flips tiles back to hidden\r\n  };\r\n\r\n  // 3. If there is not a match\r\n  const notMatch = () => {\r\n    let misMatch = new Howl({\r\n      src: [\"audio/error.mp3\"],\r\n      volume: 0.35,\r\n    });\r\n\r\n    addToScore(-1);\r\n\r\n    // Triggers display of \"-1\" on screen\r\n    setPoints(-1);\r\n\r\n    // Tiles are flipped over to hide them\r\n    setTimeout(() => setCardChoices([]), 200);\r\n    misMatch.play();\r\n  };\r\n\r\n  // ** When a card is selected **********************************************************\r\n  const handleCardSelection = (card) => {\r\n    // Prevents from clicking cards that are already a match\r\n    if (matches.includes(card.name)) {\r\n      return;\r\n    }\r\n\r\n    // Can't choose a card unless clock has been started\r\n    if (!startClock) {\r\n      return;\r\n    }\r\n\r\n    // Sound for card reveal\r\n    let revealCard = new Howl({\r\n      src: [\"audio/click.mp3\"],\r\n    });\r\n\r\n    // Adds a card if no other cards were yet selected\r\n    if (cardChoices.length === 0) {\r\n      revealCard.play();\r\n      setCardChoices([card]);\r\n      setTimeAdded(false);\r\n    }\r\n\r\n    // When 2nd card selection is made... checks if same card was not selected twice before adding\r\n    if (cardChoices.length === 1 && card.id !== cardChoices[0].id) {\r\n      revealCard.play();\r\n      setCardChoices([...cardChoices, card]);\r\n\r\n      // After 2 cards are selected... performs proper response to match or no match\r\n      let match = checkMatch(cardChoices[0].name, card.name);\r\n      if (match) {\r\n        // If player gets the \"Timer\" match... 30 seconds are added to the clock\r\n        if (card.name === \"Timer\") {\r\n          timerTile();\r\n        }\r\n        ifMatch(card); // Adds points to player's score\r\n      } else {\r\n        notMatch(); // Subtracts a point to player's score\r\n      }\r\n      setTimeout(() => setShake(false), 1000);\r\n    }\r\n  };\r\n\r\n  // Start clock\r\n  const runClock = () => {\r\n    let clockClick = new Howl({\r\n      src: [\"audio/clock-click.mp3\"],\r\n      volume: 0.5,\r\n    });\r\n    // let countdown = new Howl({\r\n    //   src: [\"audio/countdown.mp3\"],\r\n    //   volume: 0.5,\r\n    //   loop: true\r\n    // });\r\n    clockClick.play();\r\n    // countdown.play();\r\n    setStartClock(true);\r\n    let clock = setInterval(\r\n      () =>\r\n        setClockTime((clockTime) => {\r\n          if (clockTime > 0) {\r\n            return clockTime - 1;\r\n          } else {\r\n            let buzz = new Howl({\r\n              src: [\"audio/buzzer.mp3\"],\r\n              volume: 0.35,\r\n            });\r\n            buzz.play();\r\n            setTimeAdded(false);\r\n            setMatches([]);\r\n            setCardChoices([]);\r\n\r\n            // Switches to other player if in 2 Player Mode\r\n            if (playerMode !== 1) {\r\n              setCurrentPlayer(!currentPlayer);\r\n              setRound(round + 0.5);\r\n            } else {\r\n              setRound(round + 1);\r\n            }\r\n\r\n            setStartClock(false);\r\n            setClockTime(roundTime);\r\n            clearInterval(clock);\r\n          }\r\n        }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  // End of Game\r\n  const gameOver = () => {\r\n    setIsEnd(true);\r\n    Howler.unload();\r\n  };\r\n\r\n  return (\r\n    <div id=\"game-screen\">\r\n      {Math.floor(round) > 8 ? gameOver() : null}\r\n      {round === Math.ceil(round) && !startClock ? (\r\n        <Round roundNumber={round} />\r\n      ) : null}\r\n      {cardChoices.length > 1 ? <Points cardPoints={points} /> : null}\r\n      <Dashboard\r\n        currentPlayer={currentPlayer}\r\n        round={round}\r\n        player1Score={player1Score}\r\n        player2Score={player2Score}\r\n        startClock={startClock}\r\n        runClock={runClock}\r\n        clockTime={clockTime}\r\n        shake={shake}\r\n        timeAdded={timeAdded}\r\n      />\r\n      <Cards\r\n        gameCards={gameCards}\r\n        handleCardSelection={handleCardSelection}\r\n        cardChoices={cardChoices}\r\n        matches={matches}\r\n      />\r\n      <Grid />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}