{"ast":null,"code":"import _toConsumableArray from \"/Users/meghangosselin/Apps/thinkfast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/meghangosselin/Apps/thinkfast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/meghangosselin/Apps/thinkfast/src/components/GameScreen.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { cards } from \"../cardData\";\nimport { shuffleCards } from \"../shuffleCards\"; // Component imports\n\nimport Round from \"./Round\";\nimport Dashboard from \"./Dashboard\";\nimport Cards from \"./Cards\";\nimport Grid from \"./Grid\";\nimport Points from \"./Points\"; // Styles import\n\nimport \"../styles/GameScreen.scss\"; // Dependancy for sound\n\nimport { Howl, Howler } from \"howler\";\nexport default function GameScreen(_ref) {\n  var playerMode = _ref.playerMode,\n      player1Score = _ref.player1Score,\n      setPlayer1Score = _ref.setPlayer1Score,\n      player2Score = _ref.player2Score,\n      setPlayer2Score = _ref.setPlayer2Score,\n      setIsEnd = _ref.setIsEnd,\n      highScores = _ref.highScores,\n      setHighScores = _ref.setHighScores,\n      nameForPlayer1 = _ref.nameForPlayer1,\n      nameForPlayer2 = _ref.nameForPlayer2,\n      setStartGame = _ref.setStartGame,\n      startGame = _ref.startGame;\n  // Time for each round\n  var roundTime = 25; // Master Volume\n\n  Howler.volume(0.85); // Game Sound Effects\n\n  var clockClick = new Howl({\n    src: [\"audio/clock-click.mp3\"],\n    volume: 0.5\n  });\n  var buzz = new Howl({\n    src: [\"audio/buzzer.mp3\"],\n    volume: 0.35\n  });\n  var thirtySecs = new Howl({\n    src: [\"audio/time-added.mp3\"],\n    volume: 0.5\n  });\n  var revealCard = new Howl({\n    src: [\"audio/click.mp3\"]\n  });\n  var matchMade = new Howl({\n    src: [\"audio/match.mp3\"],\n    volume: 0.25\n  });\n  var misMatch = new Howl({\n    src: [\"audio/error.mp3\"],\n    volume: 0.35\n  }); // Cards\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      gameCards = _useState2[0],\n      setGameCards = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      cardChoices = _useState4[0],\n      setCardChoices = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      matches = _useState6[0],\n      setMatches = _useState6[1]; // Players\n\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentPlayer = _useState8[0],\n      setCurrentPlayer = _useState8[1]; // Clock\n\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      startClock = _useState10[0],\n      setStartClock = _useState10[1];\n\n  var _useState11 = useState(roundTime),\n      _useState12 = _slicedToArray(_useState11, 2),\n      clockTime = _useState12[0],\n      setClockTime = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      timeAdded = _useState14[0],\n      setTimeAdded = _useState14[1]; // Rounds\n\n\n  var _useState15 = useState(1),\n      _useState16 = _slicedToArray(_useState15, 2),\n      round = _useState16[0],\n      setRound = _useState16[1]; // Current points scored\n\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      shake = _useState18[0],\n      setShake = _useState18[1];\n\n  var _useState19 = useState(0),\n      _useState20 = _slicedToArray(_useState19, 2),\n      points = _useState20[0],\n      setPoints = _useState20[1];\n\n  var _useState21 = useState(0),\n      _useState22 = _slicedToArray(_useState21, 2),\n      bonusPoints = _useState22[0],\n      setBonusPoints = _useState22[1]; ////////////////////////////////////////////////////////////////////\n  // Shuffles deck when players switch turns\n\n\n  useEffect(function () {\n    var shuffledDeck = shuffleCards(cards);\n    return setGameCards(_toConsumableArray(shuffledDeck));\n  }, [currentPlayer]); // Resets and shuffles cards if all matches in deck are made\n\n  useEffect(function () {\n    if (matches.length === 14) {\n      var shuffledDeck = shuffleCards(cards);\n      setMatches([]);\n      setGameCards(_toConsumableArray(shuffledDeck));\n    }\n  }, [cardChoices]); // New Round\n\n  useEffect(function () {\n    if (playerMode === 1) {\n      var shuffledDeck = shuffleCards(cards);\n      return setGameCards(_toConsumableArray(shuffledDeck));\n    }\n  }, [round]);\n  useEffect(function () {}, [startGame]); ////////////////////////////////////////////////////////////////////\n  // SPECIAL TILES **************************************************\n\n  var timerTile = function timerTile() {\n    setClockTime(clockTime + 30); // Adds 30 seconds to the clock\n\n    setTimeAdded(true); // initiates clock animation\n\n    thirtySecs.play();\n  };\n\n  var bonusTile = function bonusTile(card) {\n    if (matches.length === 0) {\n      return card.pts;\n    } // Checks what the last match was worth\n\n\n    if (matches[0] === \"Wildcard\" || matches[0] === \"Doubler\") {\n      if (card.name === \"Wildcard\") {\n        return bonusPoints; // State that stored what last matched bonus tile was worth\n      }\n\n      if (card.name === \"Doubler\") {\n        return bonusPoints * 2; // State that stored what last matched bonus tile was worth\n      }\n    } else {\n      var lastMatch = gameCards.filter(function (gameCard) {\n        return gameCard.name === matches[0];\n      });\n\n      if (card.name === \"Wildcard\") {\n        return lastMatch[0].pts;\n      }\n\n      if (card.name === \"Doubler\") {\n        return lastMatch[0].pts * 2;\n      }\n    }\n  }; // SPECIAL TILES ABOVE **************************************************\n  // Scoring\n\n\n  var addToScore = function addToScore(points) {\n    if (currentPlayer === true) {\n      setPlayer1Score(player1Score + points);\n    } else {\n      setPlayer2Score(player2Score + points);\n    }\n  }; // ** What happens after 2 cards are picked\n  // 1. Checks for a match\n\n\n  var checkMatch = function checkMatch(card1, card2) {\n    setShake(true);\n\n    if (card1 === card2) {\n      return true;\n    } else {\n      return false;\n    }\n  }; // 2. If there is a match\n\n\n  var ifMatch = function ifMatch(card) {\n    // Set sound for match\n    var tilePoints; // Doesn't play this normal match sound if the match is the Timer\n\n    card.name !== \"Timer\" && matchMade.play(); // Check for type of match... bonus tiles or regular match\n\n    if (card.name === \"Wildcard\") {\n      addToScore(bonusTile(card));\n      tilePoints = bonusTile(card);\n      setBonusPoints(tilePoints); // Stores the points scored by the bonus tile\n\n      if (matches[0] === \"Timer\") {\n        timerTile();\n      }\n    } else if (card.name === \"Doubler\") {\n      addToScore(bonusTile(card));\n      tilePoints = bonusTile(card);\n      setBonusPoints(tilePoints); // Stores the points scored by the bonus tile\n    } else {\n      addToScore(card.pts);\n      tilePoints = card.pts;\n    }\n\n    setMatches([card.name].concat(_toConsumableArray(matches)));\n    setPoints(tilePoints); // Displays current points a match gives\n\n    setTimeout(function () {\n      return setCardChoices([]);\n    }, 1000); // Flips tiles back to hidden\n  }; // 3. If there is not a match\n\n\n  var notMatch = function notMatch() {\n    addToScore(-1); // Triggers display of \"-1\" on screen\n\n    setPoints(-1); // Tiles are flipped over to hide them\n\n    setTimeout(function () {\n      return setCardChoices([]);\n    }, 800);\n    misMatch.play();\n  }; // ** When a card is selected **********************************************************\n\n\n  var handleCardSelection = function handleCardSelection(card) {\n    // Prevents from clicking cards that are already a match\n    if (matches.includes(card.name)) {\n      return;\n    } // Can't choose a card unless clock has been started\n\n\n    if (!startClock) {\n      return;\n    } // Sound for card reveal\n    // Adds a card if no other cards were yet selected\n\n\n    if (cardChoices.length === 0) {\n      revealCard.play();\n      setCardChoices([card]);\n      setTimeAdded(false);\n    } // When 2nd card selection is made... checks if same card was not selected twice before adding\n\n\n    if (cardChoices.length === 1 && card.id !== cardChoices[0].id) {\n      revealCard.play();\n      setCardChoices([].concat(_toConsumableArray(cardChoices), [card])); // After 2 cards are selected... performs proper response to match or no match\n\n      var match = checkMatch(cardChoices[0].name, card.name);\n\n      if (match) {\n        // If player gets the \"Timer\" match... 30 seconds are added to the clock\n        if (card.name === \"Timer\") {\n          timerTile();\n        }\n\n        ifMatch(card); // Adds points to player's score\n      } else {\n        notMatch(); // Subtracts a point to player's score\n      }\n\n      setTimeout(function () {\n        return setShake(false);\n      }, 1000);\n    }\n  }; // Start clock\n\n\n  var runClock = function runClock() {\n    clockClick.play();\n    setStartClock(true);\n    var clock = setInterval(function () {\n      return setClockTime(function (clockTime) {\n        if (clockTime > 0) {\n          return clockTime - 1;\n        } else {\n          buzz.play();\n          setTimeAdded(false);\n          setMatches([]);\n          setCardChoices([]); // Switches to other player if in 2 Player Mode\n\n          if (playerMode !== 1) {\n            setCurrentPlayer(!currentPlayer);\n            setRound(round + 0.5);\n          } else {\n            setRound(round + 1);\n          }\n\n          setStartClock(false);\n          setClockTime(roundTime);\n          clearInterval(clock);\n        }\n      });\n    }, 1000);\n  }; // End of Game\n\n\n  var gameOver = function gameOver() {\n    setIsEnd(true);\n    setStartGame(false);\n    Howler.unload();\n  };\n\n  console.log(\"X\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"game-screen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 5\n    }\n  }, Math.floor(round) > 1 ? gameOver() : null, round === Math.ceil(round) && !startClock ? /*#__PURE__*/React.createElement(Round, {\n    roundNumber: round,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }\n  }) : null, cardChoices.length > 1 ? /*#__PURE__*/React.createElement(Points, {\n    cardPoints: points,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 33\n    }\n  }) : null, /*#__PURE__*/React.createElement(Dashboard, {\n    currentPlayer: currentPlayer,\n    round: round,\n    player1Score: player1Score,\n    player2Score: player2Score,\n    nameForPlayer1: nameForPlayer1,\n    nameForPlayer2: nameForPlayer2,\n    startClock: startClock,\n    runClock: runClock,\n    clockTime: clockTime,\n    shake: shake,\n    timeAdded: timeAdded,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Cards, {\n    gameCards: gameCards,\n    handleCardSelection: handleCardSelection,\n    cardChoices: cardChoices,\n    matches: matches,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/meghangosselin/Apps/thinkfast/src/components/GameScreen.js"],"names":["React","useState","useEffect","cards","shuffleCards","Round","Dashboard","Cards","Grid","Points","Howl","Howler","GameScreen","playerMode","player1Score","setPlayer1Score","player2Score","setPlayer2Score","setIsEnd","highScores","setHighScores","nameForPlayer1","nameForPlayer2","setStartGame","startGame","roundTime","volume","clockClick","src","buzz","thirtySecs","revealCard","matchMade","misMatch","gameCards","setGameCards","cardChoices","setCardChoices","matches","setMatches","currentPlayer","setCurrentPlayer","startClock","setStartClock","clockTime","setClockTime","timeAdded","setTimeAdded","round","setRound","shake","setShake","points","setPoints","bonusPoints","setBonusPoints","shuffledDeck","length","timerTile","play","bonusTile","card","pts","name","lastMatch","filter","gameCard","addToScore","checkMatch","card1","card2","ifMatch","tilePoints","setTimeout","notMatch","handleCardSelection","includes","id","match","runClock","clock","setInterval","clearInterval","gameOver","unload","console","log","Math","floor","ceil"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { cards } from \"../cardData\";\r\nimport { shuffleCards } from \"../shuffleCards\";\r\n\r\n// Component imports\r\nimport Round from \"./Round\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport Cards from \"./Cards\";\r\nimport Grid from \"./Grid\";\r\nimport Points from \"./Points\";\r\n\r\n// Styles import\r\nimport \"../styles/GameScreen.scss\";\r\n\r\n// Dependancy for sound\r\nimport { Howl, Howler } from \"howler\";\r\n\r\nexport default function GameScreen({\r\n  playerMode,\r\n  player1Score,\r\n  setPlayer1Score,\r\n  player2Score,\r\n  setPlayer2Score,\r\n  setIsEnd,\r\n  highScores,\r\n  setHighScores,\r\n  nameForPlayer1,\r\n  nameForPlayer2,\r\n  setStartGame,\r\n  startGame,\r\n}) {\r\n  // Time for each round\r\n  let roundTime = 25;\r\n\r\n  // Master Volume\r\n  Howler.volume(0.85);\r\n\r\n  // Game Sound Effects\r\n  const clockClick = new Howl({\r\n    src: [\"audio/clock-click.mp3\"],\r\n    volume: 0.5,\r\n  });\r\n\r\n  const buzz = new Howl({\r\n    src: [\"audio/buzzer.mp3\"],\r\n    volume: 0.35,\r\n  });\r\n\r\n  const thirtySecs = new Howl({\r\n    src: [\"audio/time-added.mp3\"],\r\n    volume: 0.5,\r\n  });\r\n\r\n  const revealCard = new Howl({\r\n    src: [\"audio/click.mp3\"],\r\n  });\r\n\r\n  const matchMade = new Howl({\r\n    src: [\"audio/match.mp3\"],\r\n    volume: 0.25,\r\n  });\r\n\r\n  const misMatch = new Howl({\r\n    src: [\"audio/error.mp3\"],\r\n    volume: 0.35,\r\n  });\r\n\r\n  // Cards\r\n  const [gameCards, setGameCards] = useState([]);\r\n  const [cardChoices, setCardChoices] = useState([]);\r\n  const [matches, setMatches] = useState([]);\r\n\r\n  // Players\r\n  const [currentPlayer, setCurrentPlayer] = useState(true);\r\n\r\n  // Clock\r\n  const [startClock, setStartClock] = useState(false);\r\n  const [clockTime, setClockTime] = useState(roundTime);\r\n  const [timeAdded, setTimeAdded] = useState(false);\r\n\r\n  // Rounds\r\n  const [round, setRound] = useState(1);\r\n\r\n  // Current points scored\r\n  const [shake, setShake] = useState(false);\r\n  const [points, setPoints] = useState(0);\r\n  const [bonusPoints, setBonusPoints] = useState(0);\r\n\r\n  ////////////////////////////////////////////////////////////////////\r\n\r\n  // Shuffles deck when players switch turns\r\n  useEffect(() => {\r\n    let shuffledDeck = shuffleCards(cards);\r\n    return setGameCards([...shuffledDeck]);\r\n  }, [currentPlayer]);\r\n\r\n  // Resets and shuffles cards if all matches in deck are made\r\n  useEffect(() => {\r\n    if (matches.length === 14) {\r\n      let shuffledDeck = shuffleCards(cards);\r\n      setMatches([]);\r\n      setGameCards([...shuffledDeck]);\r\n    }\r\n  }, [cardChoices]);\r\n\r\n  // New Round\r\n  useEffect(() => {\r\n    if (playerMode === 1) {\r\n      let shuffledDeck = shuffleCards(cards);\r\n      return setGameCards([...shuffledDeck]);\r\n    }\r\n  }, [round]);\r\n\r\n  useEffect(() => {}, [startGame]);\r\n\r\n  ////////////////////////////////////////////////////////////////////\r\n\r\n  // SPECIAL TILES **************************************************\r\n  const timerTile = () => {\r\n    setClockTime(clockTime + 30); // Adds 30 seconds to the clock\r\n    setTimeAdded(true); // initiates clock animation\r\n    thirtySecs.play();\r\n  };\r\n\r\n  const bonusTile = (card) => {\r\n    if (matches.length === 0) {\r\n      return card.pts;\r\n    }\r\n    // Checks what the last match was worth\r\n    if (matches[0] === \"Wildcard\" || matches[0] === \"Doubler\") {\r\n      if (card.name === \"Wildcard\") {\r\n        return bonusPoints; // State that stored what last matched bonus tile was worth\r\n      }\r\n\r\n      if (card.name === \"Doubler\") {\r\n        return bonusPoints * 2; // State that stored what last matched bonus tile was worth\r\n      }\r\n    } else {\r\n      let lastMatch = gameCards.filter((gameCard) => {\r\n        return gameCard.name === matches[0];\r\n      });\r\n\r\n      if (card.name === \"Wildcard\") {\r\n        return lastMatch[0].pts;\r\n      }\r\n\r\n      if (card.name === \"Doubler\") {\r\n        return lastMatch[0].pts * 2;\r\n      }\r\n    }\r\n  };\r\n\r\n  // SPECIAL TILES ABOVE **************************************************\r\n\r\n  // Scoring\r\n  const addToScore = (points) => {\r\n    if (currentPlayer === true) {\r\n      setPlayer1Score(player1Score + points);\r\n    } else {\r\n      setPlayer2Score(player2Score + points);\r\n    }\r\n  };\r\n\r\n  // ** What happens after 2 cards are picked\r\n  // 1. Checks for a match\r\n  const checkMatch = (card1, card2) => {\r\n    setShake(true);\r\n    if (card1 === card2) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // 2. If there is a match\r\n  const ifMatch = (card) => {\r\n    // Set sound for match\r\n\r\n    let tilePoints;\r\n\r\n    // Doesn't play this normal match sound if the match is the Timer\r\n    card.name !== \"Timer\" && matchMade.play();\r\n\r\n    // Check for type of match... bonus tiles or regular match\r\n    if (card.name === \"Wildcard\") {\r\n      addToScore(bonusTile(card));\r\n      tilePoints = bonusTile(card);\r\n      setBonusPoints(tilePoints); // Stores the points scored by the bonus tile\r\n      if (matches[0] === \"Timer\") {\r\n        timerTile();\r\n      }\r\n    } else if (card.name === \"Doubler\") {\r\n      addToScore(bonusTile(card));\r\n      tilePoints = bonusTile(card);\r\n      setBonusPoints(tilePoints); // Stores the points scored by the bonus tile\r\n    } else {\r\n      addToScore(card.pts);\r\n      tilePoints = card.pts;\r\n    }\r\n\r\n    setMatches([card.name, ...matches]);\r\n    setPoints(tilePoints); // Displays current points a match gives\r\n    setTimeout(() => setCardChoices([]), 1000); // Flips tiles back to hidden\r\n  };\r\n\r\n  // 3. If there is not a match\r\n  const notMatch = () => {\r\n    addToScore(-1);\r\n\r\n    // Triggers display of \"-1\" on screen\r\n    setPoints(-1);\r\n\r\n    // Tiles are flipped over to hide them\r\n    setTimeout(() => setCardChoices([]), 800);\r\n    misMatch.play();\r\n  };\r\n\r\n  // ** When a card is selected **********************************************************\r\n  const handleCardSelection = (card) => {\r\n    // Prevents from clicking cards that are already a match\r\n    if (matches.includes(card.name)) {\r\n      return;\r\n    }\r\n\r\n    // Can't choose a card unless clock has been started\r\n    if (!startClock) {\r\n      return;\r\n    }\r\n\r\n    // Sound for card reveal\r\n\r\n    // Adds a card if no other cards were yet selected\r\n    if (cardChoices.length === 0) {\r\n      revealCard.play();\r\n      setCardChoices([card]);\r\n      setTimeAdded(false);\r\n    }\r\n\r\n    // When 2nd card selection is made... checks if same card was not selected twice before adding\r\n    if (cardChoices.length === 1 && card.id !== cardChoices[0].id) {\r\n      revealCard.play();\r\n      setCardChoices([...cardChoices, card]);\r\n\r\n      // After 2 cards are selected... performs proper response to match or no match\r\n      let match = checkMatch(cardChoices[0].name, card.name);\r\n      if (match) {\r\n        // If player gets the \"Timer\" match... 30 seconds are added to the clock\r\n        if (card.name === \"Timer\") {\r\n          timerTile();\r\n        }\r\n        ifMatch(card); // Adds points to player's score\r\n      } else {\r\n        notMatch(); // Subtracts a point to player's score\r\n      }\r\n      setTimeout(() => setShake(false), 1000);\r\n    }\r\n  };\r\n\r\n  // Start clock\r\n  const runClock = () => {\r\n    clockClick.play();\r\n\r\n    setStartClock(true);\r\n    let clock = setInterval(\r\n      () =>\r\n        setClockTime((clockTime) => {\r\n          if (clockTime > 0) {\r\n            return clockTime - 1;\r\n          } else {\r\n            buzz.play();\r\n            setTimeAdded(false);\r\n            setMatches([]);\r\n            setCardChoices([]);\r\n\r\n            // Switches to other player if in 2 Player Mode\r\n            if (playerMode !== 1) {\r\n              setCurrentPlayer(!currentPlayer);\r\n              setRound(round + 0.5);\r\n            } else {\r\n              setRound(round + 1);\r\n            }\r\n\r\n            setStartClock(false);\r\n            setClockTime(roundTime);\r\n            clearInterval(clock);\r\n          }\r\n        }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  // End of Game\r\n  const gameOver = () => {\r\n    setIsEnd(true);\r\n    setStartGame(false);\r\n    Howler.unload();\r\n  };\r\n\r\n  console.log(\"X\");\r\n  return (\r\n    <div id=\"game-screen\">\r\n      {Math.floor(round) > 1 ? gameOver() : null}\r\n      {round === Math.ceil(round) && !startClock ? (\r\n        <Round roundNumber={round} />\r\n      ) : null}\r\n      {cardChoices.length > 1 ? <Points cardPoints={points} /> : null}\r\n      <Dashboard\r\n        currentPlayer={currentPlayer}\r\n        round={round}\r\n        player1Score={player1Score}\r\n        player2Score={player2Score}\r\n        nameForPlayer1={nameForPlayer1}\r\n        nameForPlayer2={nameForPlayer2}\r\n        startClock={startClock}\r\n        runClock={runClock}\r\n        clockTime={clockTime}\r\n        shake={shake}\r\n        timeAdded={timeAdded}\r\n      />\r\n      <Cards\r\n        gameCards={gameCards}\r\n        handleCardSelection={handleCardSelection}\r\n        cardChoices={cardChoices}\r\n        matches={matches}\r\n      />\r\n      <Grid />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}