{"ast":null,"code":"import _toConsumableArray from\"/Users/meghangosselin/Apps/thinkfast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/meghangosselin/Apps/thinkfast/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{cards}from\"../cardData\";import{shuffleCards}from\"../shuffleCards\";// Component imports\nimport Round from\"./Round\";import Dashboard from\"./Dashboard\";import Cards from\"./Cards\";import Grid from\"./Grid\";import Points from\"./Points\";// Styles import\nimport\"../styles/GameScreen.scss\";// Dependancy for sound\nimport{Howl,Howler}from\"howler\";export default function GameScreen(_ref){var playerMode=_ref.playerMode,player1Score=_ref.player1Score,setPlayer1Score=_ref.setPlayer1Score,player2Score=_ref.player2Score,setPlayer2Score=_ref.setPlayer2Score,setIsEnd=_ref.setIsEnd;// Time for each round\nvar roundTime=60;// Master Volume\nHowler.volume(0.85);// Cards\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),gameCards=_useState2[0],setGameCards=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),cardChoices=_useState4[0],setCardChoices=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),matches=_useState6[0],setMatches=_useState6[1];// Players\nvar _useState7=useState(true),_useState8=_slicedToArray(_useState7,2),currentPlayer=_useState8[0],setCurrentPlayer=_useState8[1];// Clock\nvar _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),startClock=_useState10[0],setStartClock=_useState10[1];var _useState11=useState(roundTime),_useState12=_slicedToArray(_useState11,2),clockTime=_useState12[0],setClockTime=_useState12[1];var _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),timeAdded=_useState14[0],setTimeAdded=_useState14[1];// Rounds\nvar _useState15=useState(1),_useState16=_slicedToArray(_useState15,2),round=_useState16[0],setRound=_useState16[1];// Current points scored\nvar _useState17=useState(false),_useState18=_slicedToArray(_useState17,2),shake=_useState18[0],setShake=_useState18[1];var _useState19=useState(0),_useState20=_slicedToArray(_useState19,2),points=_useState20[0],setPoints=_useState20[1];var _useState21=useState(0),_useState22=_slicedToArray(_useState21,2),bonusPoints=_useState22[0],setBonusPoints=_useState22[1];////////////////////////////////////////////////////////////////////\n// Shuffles deck when players switch turns\nuseEffect(function(){var shuffledDeck=shuffleCards(cards);return setGameCards(_toConsumableArray(shuffledDeck));},[currentPlayer]);// Resets and shuffles cards if all matches in deck are made\nuseEffect(function(){if(matches.length===14){var shuffledDeck=shuffleCards(cards);setMatches([]);setGameCards(_toConsumableArray(shuffledDeck));}},[cardChoices]);// New Round\nuseEffect(function(){if(playerMode===1){var shuffledDeck=shuffleCards(cards);return setGameCards(_toConsumableArray(shuffledDeck));}},[round]);////////////////////////////////////////////////////////////////////\n// SPECIAL TILES **************************************************\nvar timerTile=function timerTile(){var audio=new Howl({src:[\"audio/time-added.mp3\"],volume:0.5});setClockTime(clockTime+30);// Adds 30 seconds to the clock\nsetTimeAdded(true);// initiates clock animation\naudio.play();};var bonusTile=function bonusTile(card){if(matches.length===0){return card.pts;}// Checks what the last match was worth\nif(matches[0]===\"Wildcard\"||matches[0]===\"Doubler\"){if(card.name===\"Wildcard\"){return bonusPoints;// State that stored what last matched bonus tile was worth\n}if(card.name===\"Doubler\"){return bonusPoints*2;// State that stored what last matched bonus tile was worth\n}}else{var lastMatch=gameCards.filter(function(gameCard){return gameCard.name===matches[0];});if(card.name===\"Wildcard\"){return lastMatch[0].pts;}if(card.name===\"Doubler\"){return lastMatch[0].pts*2;}}};// SPECIAL TILES ABOVE **************************************************\n// Scoring\nvar addToScore=function addToScore(points){if(currentPlayer===true){setPlayer1Score(player1Score+points);}else{setPlayer2Score(player2Score+points);}};// ** What happens after 2 cards are picked\n// 1. Checks for a match\nvar checkMatch=function checkMatch(card1,card2){setShake(true);if(card1===card2){return true;}else{return false;}};// 2. If there is a match\nvar ifMatch=function ifMatch(card){// Set sound for match\nvar matchMade=new Howl({src:[\"audio/match.mp3\"],volume:0.25});var tilePoints;// Doesn't play this normal match sound if the match is the Timer\ncard.name!==\"Timer\"&&matchMade.play();// Check for type of match... bonus tiles or regular match\nif(card.name===\"Wildcard\"){addToScore(bonusTile(card));tilePoints=bonusTile(card);setBonusPoints(tilePoints);// Stores the points scored by the bonus tile\nif(matches[0]===\"Timer\"){timerTile();}}else if(card.name===\"Doubler\"){addToScore(bonusTile(card));tilePoints=bonusTile(card);setBonusPoints(tilePoints);// Stores the points scored by the bonus tile\n}else{addToScore(card.pts);tilePoints=card.pts;}setMatches([card.name].concat(_toConsumableArray(matches)));setPoints(tilePoints);// Displays current points a match gives\nsetTimeout(function(){return setCardChoices([]);},1000);// Flips tiles back to hidden\n};// 3. If there is not a match\nvar notMatch=function notMatch(){var misMatch=new Howl({src:[\"audio/error.mp3\"],volume:0.35});addToScore(-1);// Triggers display of \"-1\" on screen\nsetPoints(-1);// Tiles are flipped over to hide them\nsetTimeout(function(){return setCardChoices([]);},800);misMatch.play();};// ** When a card is selected **********************************************************\nvar handleCardSelection=function handleCardSelection(card){// Prevents from clicking cards that are already a match\nif(matches.includes(card.name)){return;}// Can't choose a card unless clock has been started\nif(!startClock){return;}// Sound for card reveal\nvar revealCard=new Howl({src:[\"audio/click.mp3\"]});// Adds a card if no other cards were yet selected\nif(cardChoices.length===0){revealCard.play();setCardChoices([card]);setTimeAdded(false);}// When 2nd card selection is made... checks if same card was not selected twice before adding\nif(cardChoices.length===1&&card.id!==cardChoices[0].id){revealCard.play();setCardChoices([].concat(_toConsumableArray(cardChoices),[card]));// After 2 cards are selected... performs proper response to match or no match\nvar match=checkMatch(cardChoices[0].name,card.name);if(match){// If player gets the \"Timer\" match... 30 seconds are added to the clock\nif(card.name===\"Timer\"){timerTile();}ifMatch(card);// Adds points to player's score\n}else{notMatch();// Subtracts a point to player's score\n}setTimeout(function(){return setShake(false);},1000);}};// Start clock\nvar runClock=function runClock(){var clockClick=new Howl({src:[\"audio/clock-click.mp3\"],volume:0.5});// let countdown = new Howl({\n//   src: [\"audio/countdown.mp3\"],\n//   volume: 0.5,\n//   loop: true\n// });\nclockClick.play();// countdown.play();\nsetStartClock(true);var clock=setInterval(function(){return setClockTime(function(clockTime){if(clockTime>0){return clockTime-1;}else{var buzz=new Howl({src:[\"audio/buzzer.mp3\"],volume:0.35});buzz.play();setTimeAdded(false);setMatches([]);setCardChoices([]);// Switches to other player if in 2 Player Mode\nif(playerMode!==1){setCurrentPlayer(!currentPlayer);setRound(round+0.5);}else{setRound(round+1);}setStartClock(false);setClockTime(roundTime);clearInterval(clock);}});},1000);};// End of Game\nvar gameOver=function gameOver(){setIsEnd(true);Howler.unload();};return/*#__PURE__*/React.createElement(\"div\",{id:\"game-screen\"},Math.floor(round)>8?gameOver():null,round===Math.ceil(round)&&!startClock?/*#__PURE__*/React.createElement(Round,{roundNumber:round}):null,cardChoices.length>1?/*#__PURE__*/React.createElement(Points,{cardPoints:points}):null,/*#__PURE__*/React.createElement(Dashboard,{currentPlayer:currentPlayer,round:round,player1Score:player1Score,player2Score:player2Score,startClock:startClock,runClock:runClock,clockTime:clockTime,shake:shake,timeAdded:timeAdded}),/*#__PURE__*/React.createElement(Cards,{gameCards:gameCards,handleCardSelection:handleCardSelection,cardChoices:cardChoices,matches:matches}),/*#__PURE__*/React.createElement(Grid,null));}","map":{"version":3,"sources":["/Users/meghangosselin/Apps/thinkfast/src/components/GameScreen.js"],"names":["React","useState","useEffect","cards","shuffleCards","Round","Dashboard","Cards","Grid","Points","Howl","Howler","GameScreen","playerMode","player1Score","setPlayer1Score","player2Score","setPlayer2Score","setIsEnd","roundTime","volume","gameCards","setGameCards","cardChoices","setCardChoices","matches","setMatches","currentPlayer","setCurrentPlayer","startClock","setStartClock","clockTime","setClockTime","timeAdded","setTimeAdded","round","setRound","shake","setShake","points","setPoints","bonusPoints","setBonusPoints","shuffledDeck","length","timerTile","audio","src","play","bonusTile","card","pts","name","lastMatch","filter","gameCard","addToScore","checkMatch","card1","card2","ifMatch","matchMade","tilePoints","setTimeout","notMatch","misMatch","handleCardSelection","includes","revealCard","id","match","runClock","clockClick","clock","setInterval","buzz","clearInterval","gameOver","unload","Math","floor","ceil"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { cards } from \"../cardData\";\r\nimport { shuffleCards } from \"../shuffleCards\";\r\n\r\n// Component imports\r\nimport Round from \"./Round\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport Cards from \"./Cards\";\r\nimport Grid from \"./Grid\";\r\nimport Points from \"./Points\";\r\n\r\n// Styles import\r\nimport \"../styles/GameScreen.scss\";\r\n\r\n// Dependancy for sound\r\nimport { Howl, Howler } from \"howler\";\r\n\r\nexport default function GameScreen({\r\n  playerMode,\r\n  player1Score,\r\n  setPlayer1Score,\r\n  player2Score,\r\n  setPlayer2Score,\r\n  setIsEnd,\r\n}) {\r\n  // Time for each round\r\n  let roundTime = 60;\r\n\r\n  // Master Volume\r\n  Howler.volume(0.85);\r\n\r\n  // Cards\r\n  const [gameCards, setGameCards] = useState([]);\r\n  const [cardChoices, setCardChoices] = useState([]);\r\n  const [matches, setMatches] = useState([]);\r\n\r\n  // Players\r\n  const [currentPlayer, setCurrentPlayer] = useState(true);\r\n\r\n  // Clock\r\n  const [startClock, setStartClock] = useState(false);\r\n  const [clockTime, setClockTime] = useState(roundTime);\r\n  const [timeAdded, setTimeAdded] = useState(false);\r\n\r\n  // Rounds\r\n  const [round, setRound] = useState(1);\r\n\r\n  // Current points scored\r\n  const [shake, setShake] = useState(false);\r\n  const [points, setPoints] = useState(0);\r\n  const [bonusPoints, setBonusPoints] = useState(0);\r\n\r\n  ////////////////////////////////////////////////////////////////////\r\n\r\n  // Shuffles deck when players switch turns\r\n  useEffect(() => {\r\n    let shuffledDeck = shuffleCards(cards);\r\n    return setGameCards([...shuffledDeck]);\r\n  }, [currentPlayer]);\r\n\r\n  // Resets and shuffles cards if all matches in deck are made\r\n  useEffect(() => {\r\n    if (matches.length === 14) {\r\n      let shuffledDeck = shuffleCards(cards);\r\n      setMatches([]);\r\n      setGameCards([...shuffledDeck]);\r\n    }\r\n  }, [cardChoices]);\r\n\r\n  // New Round\r\n  useEffect(() => {\r\n    if (playerMode === 1) {\r\n      let shuffledDeck = shuffleCards(cards);\r\n      return setGameCards([...shuffledDeck]);\r\n    }\r\n  }, [round]);\r\n\r\n  ////////////////////////////////////////////////////////////////////\r\n\r\n  // SPECIAL TILES **************************************************\r\n  const timerTile = () => {\r\n    let audio = new Howl({\r\n      src: [\"audio/time-added.mp3\"],\r\n      volume: 0.5,\r\n    });\r\n\r\n    setClockTime(clockTime + 30); // Adds 30 seconds to the clock\r\n    setTimeAdded(true); // initiates clock animation\r\n    audio.play();\r\n  };\r\n\r\n  const bonusTile = (card) => {\r\n    if (matches.length === 0) {\r\n      return card.pts;\r\n    }\r\n    // Checks what the last match was worth\r\n    if (matches[0] === \"Wildcard\" || matches[0] === \"Doubler\") {\r\n      if (card.name === \"Wildcard\") {\r\n        return bonusPoints; // State that stored what last matched bonus tile was worth\r\n      }\r\n\r\n      if (card.name === \"Doubler\") {\r\n        return bonusPoints * 2; // State that stored what last matched bonus tile was worth\r\n      }\r\n    } else {\r\n      let lastMatch = gameCards.filter((gameCard) => {\r\n        return gameCard.name === matches[0];\r\n      });\r\n\r\n      if (card.name === \"Wildcard\") {\r\n        return lastMatch[0].pts;\r\n      }\r\n\r\n      if (card.name === \"Doubler\") {\r\n        return lastMatch[0].pts * 2;\r\n      }\r\n    }\r\n  };\r\n\r\n  // SPECIAL TILES ABOVE **************************************************\r\n\r\n  // Scoring\r\n  const addToScore = (points) => {\r\n    if (currentPlayer === true) {\r\n      setPlayer1Score(player1Score + points);\r\n    } else {\r\n      setPlayer2Score(player2Score + points);\r\n    }\r\n  };\r\n\r\n  // ** What happens after 2 cards are picked\r\n  // 1. Checks for a match\r\n  const checkMatch = (card1, card2) => {\r\n    setShake(true);\r\n    if (card1 === card2) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // 2. If there is a match\r\n  const ifMatch = (card) => {\r\n    // Set sound for match\r\n    const matchMade = new Howl({\r\n      src: [\"audio/match.mp3\"],\r\n      volume: 0.25,\r\n    });\r\n\r\n    let tilePoints;\r\n\r\n    // Doesn't play this normal match sound if the match is the Timer\r\n    card.name !== \"Timer\" && matchMade.play();\r\n\r\n    // Check for type of match... bonus tiles or regular match\r\n    if (card.name === \"Wildcard\") {\r\n      addToScore(bonusTile(card));\r\n      tilePoints = bonusTile(card);\r\n      setBonusPoints(tilePoints); // Stores the points scored by the bonus tile\r\n      if (matches[0] === \"Timer\") {\r\n        timerTile();\r\n      }\r\n    } else if (card.name === \"Doubler\") {\r\n      addToScore(bonusTile(card));\r\n      tilePoints = bonusTile(card);\r\n      setBonusPoints(tilePoints); // Stores the points scored by the bonus tile\r\n    } else {\r\n      addToScore(card.pts);\r\n      tilePoints = card.pts;\r\n    }\r\n\r\n    setMatches([card.name, ...matches]);\r\n    setPoints(tilePoints); // Displays current points a match gives\r\n    setTimeout(() => setCardChoices([]), 1000); // Flips tiles back to hidden\r\n  };\r\n\r\n  // 3. If there is not a match\r\n  const notMatch = () => {\r\n    let misMatch = new Howl({\r\n      src: [\"audio/error.mp3\"],\r\n      volume: 0.35,\r\n    });\r\n\r\n    addToScore(-1);\r\n\r\n    // Triggers display of \"-1\" on screen\r\n    setPoints(-1);\r\n\r\n    // Tiles are flipped over to hide them\r\n    setTimeout(() => setCardChoices([]), 800);\r\n    misMatch.play();\r\n  };\r\n\r\n  // ** When a card is selected **********************************************************\r\n  const handleCardSelection = (card) => {\r\n    // Prevents from clicking cards that are already a match\r\n    if (matches.includes(card.name)) {\r\n      return;\r\n    }\r\n\r\n    // Can't choose a card unless clock has been started\r\n    if (!startClock) {\r\n      return;\r\n    }\r\n\r\n    // Sound for card reveal\r\n    let revealCard = new Howl({\r\n      src: [\"audio/click.mp3\"],\r\n    });\r\n\r\n    // Adds a card if no other cards were yet selected\r\n    if (cardChoices.length === 0) {\r\n      revealCard.play();\r\n      setCardChoices([card]);\r\n      setTimeAdded(false);\r\n    }\r\n\r\n    // When 2nd card selection is made... checks if same card was not selected twice before adding\r\n    if (cardChoices.length === 1 && card.id !== cardChoices[0].id) {\r\n      revealCard.play();\r\n      setCardChoices([...cardChoices, card]);\r\n\r\n      // After 2 cards are selected... performs proper response to match or no match\r\n      let match = checkMatch(cardChoices[0].name, card.name);\r\n      if (match) {\r\n        // If player gets the \"Timer\" match... 30 seconds are added to the clock\r\n        if (card.name === \"Timer\") {\r\n          timerTile();\r\n        }\r\n        ifMatch(card); // Adds points to player's score\r\n      } else {\r\n        notMatch(); // Subtracts a point to player's score\r\n      }\r\n      setTimeout(() => setShake(false), 1000);\r\n    }\r\n  };\r\n\r\n  // Start clock\r\n  const runClock = () => {\r\n    let clockClick = new Howl({\r\n      src: [\"audio/clock-click.mp3\"],\r\n      volume: 0.5,\r\n    });\r\n    // let countdown = new Howl({\r\n    //   src: [\"audio/countdown.mp3\"],\r\n    //   volume: 0.5,\r\n    //   loop: true\r\n    // });\r\n    clockClick.play();\r\n    // countdown.play();\r\n    setStartClock(true);\r\n    let clock = setInterval(\r\n      () =>\r\n        setClockTime((clockTime) => {\r\n          if (clockTime > 0) {\r\n            return clockTime - 1;\r\n          } else {\r\n            let buzz = new Howl({\r\n              src: [\"audio/buzzer.mp3\"],\r\n              volume: 0.35,\r\n            });\r\n            buzz.play();\r\n            setTimeAdded(false);\r\n            setMatches([]);\r\n            setCardChoices([]);\r\n\r\n            // Switches to other player if in 2 Player Mode\r\n            if (playerMode !== 1) {\r\n              setCurrentPlayer(!currentPlayer);\r\n              setRound(round + 0.5);\r\n            } else {\r\n              setRound(round + 1);\r\n            }\r\n\r\n            setStartClock(false);\r\n            setClockTime(roundTime);\r\n            clearInterval(clock);\r\n          }\r\n        }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  // End of Game\r\n  const gameOver = () => {\r\n    setIsEnd(true);\r\n    Howler.unload();\r\n  };\r\n\r\n  return (\r\n    <div id=\"game-screen\">\r\n      {Math.floor(round) > 8 ? gameOver() : null}\r\n      {round === Math.ceil(round) && !startClock ? (\r\n        <Round roundNumber={round} />\r\n      ) : null}\r\n      {cardChoices.length > 1 ? <Points cardPoints={points} /> : null}\r\n      <Dashboard\r\n        currentPlayer={currentPlayer}\r\n        round={round}\r\n        player1Score={player1Score}\r\n        player2Score={player2Score}\r\n        startClock={startClock}\r\n        runClock={runClock}\r\n        clockTime={clockTime}\r\n        shake={shake}\r\n        timeAdded={timeAdded}\r\n      />\r\n      <Cards\r\n        gameCards={gameCards}\r\n        handleCardSelection={handleCardSelection}\r\n        cardChoices={cardChoices}\r\n        matches={matches}\r\n      />\r\n      <Grid />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}